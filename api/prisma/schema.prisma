// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique @db.VarChar(32)
  email    String  @unique @db.VarChar(255)
  bio      String? @db.VarChar(255)

  timestamp DateTime @default(now())

  posts          Post[]
  comments       Comment[]
  PostView       PostView[]
  Notification   Notification[]
  SubscribedPost SubscribedPost[]
}

model Post {
  id        String   @id @default(uuid())
  user_id   String   @db.VarChar(255)
  title     String   @db.VarChar(255)
  body      String   @db.Text
  timestamp DateTime @default(now())

  user     User      @relation(fields: [user_id], references: [id])
  hashtags Hashtag[] @relation("PostToHashTag")

  comments       Comment[]
  PostView       PostView[]
  Notification   Notification[]
  SubscribedPost SubscribedPost[]
}

model Comment {
  id                String   @id @default(uuid())
  user_id           String   @db.VarChar(255)
  post_id           String
  parent_comment_id String?
  content           String   @db.Text
  timestamp         DateTime @default(now())

  user          User     @relation(fields: [user_id], references: [id])
  post          Post     @relation(fields: [post_id], references: [id])
  parentComment Comment? @relation("CommentToComment", fields: [parent_comment_id], references: [id])

  comments     Comment[]      @relation("CommentToComment")
  Notification Notification[]
}

model PostVote {
  post_id   String
  user_id   String
  vote_type String

  @@id([post_id, user_id])
  @@index([user_id])
}

model CommentVote {
  comment_id String
  user_id    String
  vote_type  String

  @@id([comment_id, user_id])
  @@index([user_id])
}

model PostView {
  post_id String
  user_id String

  post Post @relation(fields: [post_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@id([post_id, user_id])
  @@index([user_id])
  @@index([post_id])
}

model Hashtag {
  value String @id @db.VarChar(255)
  posts Post[] @relation("PostToHashTag")
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String   @db.VarChar(255)
  post_id    String?
  comment_id String?
  message    String
  viewed     Boolean  @default(false)
  timestamp  DateTime @default(now())

  user    User     @relation(fields: [user_id], references: [id])
  post    Post?    @relation(fields: [post_id], references: [id])
  comment Comment? @relation(fields: [comment_id], references: [id])
}

model SubscribedPost {
  id        String   @id @default(uuid())
  user_id   String   @db.VarChar(255)
  post_id   String   @db.VarChar(255)
  timestamp DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}
